'use client'

import { useState, useEffect } from 'react'
import { toast } from 'react-hot-toast'

export default function ESPTestPage() {
  const [isTesting, setIsTesting] = useState(false)
  const [results, setResults] = useState<any[]>([])
  const [testEmail, setTestEmail] = useState('')

  useEffect(() => {
    // 尝试获取用户邮箱，如果不存在则设置测试邮箱
    const userEmail = localStorage.getItem('userEmail') || sessionStorage.getItem('userEmail')
    if (!userEmail) {
      setTestEmail('test@novamail.dev')
      // 模拟登录状态
      localStorage.setItem('userEmail', 'test@novamail.dev')
    } else {
      setTestEmail(userEmail)
    }
  }, [])

  const testTemplate = {
    name: 'NovaMail Test Template',
    subject: 'Test Email from NovaMail',
    html: `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>NovaMail Test Template</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }
          .content { padding: 20px; background: #f9f9f9; border-radius: 8px; margin: 20px 0; }
          .footer { text-align: center; color: #666; font-size: 14px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>🚀 NovaMail ESP Export Test</h1>
          <p>Template successfully exported!</p>
        </div>
        
        <div class="content">
          <h2>Template Features:</h2>
          <ul>
            <li>✅ Responsive design</li>
            <li>✅ Modern gradient header</li>
            <li>✅ Clean typography</li>
            <li>✅ Professional layout</li>
            <li>✅ ESP integration ready</li>
          </ul>
          
          <p>This template was created in NovaMail and exported to your ESP platform.</p>
        </div>
        
        <div class="footer">
          <p>Generated by NovaMail ESP Export System</p>
          <p>Timestamp: ${new Date().toLocaleString()}</p>
        </div>
      </body>
      </html>
    `
  }

  const testESPExport = async (esp: string) => {
    setIsTesting(true)
    
    try {
      const response = await fetch('/api/export', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          esp: esp,
          name: testTemplate.name,
          html: testTemplate.html,
          subject: testTemplate.subject,
          userEmail: testEmail
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      
      const testResult = {
        esp: esp,
        success: result.success,
        timestamp: new Date().toLocaleString(),
        data: result
      }
      
      setResults(prev => [testResult, ...prev])
      
      if (result.success) {
        toast.success(`${esp} export successful!`)
        if (result.edit_url) {
          const shouldOpen = confirm(
            `${esp} export successful!\n\nTemplate: ${result.template_name}\nID: ${result.id}\n\nWould you like to open the editor?`
          )
          if (shouldOpen) {
            window.open(result.edit_url, '_blank')
          }
        }
      } else {
        toast.error(`${esp} export failed: ${result.error}`)
      }
      
    } catch (error) {
      console.error(`${esp} export error:`, error)
      toast.error(`${esp} export failed: ${error instanceof Error ? error.message : 'Unknown error'}`)
      
      const testResult = {
        esp: esp,
        success: false,
        timestamp: new Date().toLocaleString(),
        error: error instanceof Error ? error.message : 'Unknown error'
      }
      
      setResults(prev => [testResult, ...prev])
    } finally {
      setIsTesting(false)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg p-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">
            🧪 ESP Export Test
          </h1>
          
          <p className="text-gray-600 mb-8">
            Test the ESP export functionality with Mailchimp and Resend integrations.
          </p>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            <button
              onClick={() => testESPExport('mailchimp')}
              disabled={isTesting}
              className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isTesting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Testing...
                </>
              ) : (
                <>
                  📧 Test Mailchimp
                </>
              )}
            </button>

            <button
              onClick={() => testESPExport('resend')}
              disabled={isTesting}
              className="px-6 py-3 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isTesting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Testing...
                </>
              ) : (
                <>
                  📧 Test Resend
                </>
              )}
            </button>

            <button
              onClick={() => testESPExport('sendgrid')}
              disabled={isTesting}
              className="px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isTesting ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Testing...
                </>
              ) : (
                <>
                  📧 Test SendGrid
                </>
              )}
            </button>
          </div>

          {results.length > 0 && (
            <div className="mt-8">
              <h2 className="text-xl font-semibold text-gray-900 mb-4">
                Test Results
              </h2>
              
              <div className="space-y-4">
                {results.map((result, index) => (
                  <div
                    key={index}
                    className={`p-4 rounded-lg border ${
                      result.success 
                        ? 'bg-green-50 border-green-200' 
                        : 'bg-red-50 border-red-200'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium text-gray-900">
                        {result.esp.toUpperCase()} Export
                      </h3>
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        result.success 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {result.success ? 'SUCCESS' : 'FAILED'}
                      </span>
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-2">
                      {result.timestamp}
                    </p>
                    
                    {result.success ? (
                      <div className="text-sm">
                        <p><strong>Template ID:</strong> {result.data.id}</p>
                        <p><strong>Template Name:</strong> {result.data.template_name}</p>
                        {result.data.edit_url && (
                          <p><strong>Edit URL:</strong> 
                            <a 
                              href={result.data.edit_url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 ml-1"
                            >
                              Open Editor
                            </a>
                          </p>
                        )}
                      </div>
                    ) : (
                      <div className="text-sm text-red-600">
                        <p><strong>Error:</strong> {result.error || result.data?.error}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="mt-8 p-4 bg-blue-50 rounded-lg">
            <h3 className="font-medium text-blue-900 mb-2">
              Expected Results:
            </h3>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>• <strong>Mailchimp:</strong> Should create template successfully (API Key configured)</li>
              <li>• <strong>Resend:</strong> Should return "not supported" message</li>
              <li>• <strong>SendGrid:</strong> Should fail without API Key (expected)</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}
