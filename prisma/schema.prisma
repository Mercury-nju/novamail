// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription fields
  subscriptionId     String?
  subscriptionStatus String?  @default("free") // free, active, canceled, past_due
  subscriptionPlan   String?  @default("free") // free, pro, enterprise
  subscriptionEndsAt DateTime?
  stripeCustomerId   String?
  
  // Usage tracking
  emailsSentThisMonth Int @default(0)
  contactsCount       Int @default(0)
  campaignsCount      Int @default(0)
  lastUsageReset      DateTime @default(now())

  accounts Account[]
  sessions Session[]
  campaigns Campaign[]
  contacts Contact[]
  subscriptions Subscription[]
  payments Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  subject     String
  body        String
  userSegment String
  goal        String
  style       String
  status      String   @default("draft")
  recipients  Int      @default(0)
  sentDate    DateTime?
  openRate    Float?
  clickRate   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id          String   @id @default(cuid())
  email       String
  firstName   String?
  lastName    String?
  userSegment String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationCode {
  id        String   @id @default(cuid())
  login     String
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([login, code])
}

model Subscription {
  id                String   @id @default(cuid())
  stripeSubscriptionId String @unique
  userId            String
  plan              String   // free, pro, enterprise
  status            String   // active, canceled, past_due, incomplete
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                String   @id @default(cuid())
  stripePaymentIntentId String @unique
  userId            String
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  status            String   // succeeded, pending, failed
  description       String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}